import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA70001,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray100,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 5,
        space: 5,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.whiteA70002,
          fontSize: 16.fSize,
          fontFamily: 'BentonSans Bold',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray800.withOpacity(0.46),
          fontSize: 14.fSize,
          fontFamily: 'BentonSans Regular',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.black90001,
          fontSize: 12.fSize,
          fontFamily: 'BentonSans Book',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.greenA200,
          fontSize: 40.fSize,
          fontFamily: 'Viga',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 31.fSize,
          fontFamily: 'BentonSans Bold',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: 27.fSize,
          fontFamily: 'BentonSans Bold',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 25.fSize,
          fontFamily: 'BentonSans Bold',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: 13.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: appTheme.yellow800,
          fontSize: 22.fSize,
          fontFamily: 'BentonSans Bold',
          fontWeight: FontWeight.w400,
        ),
        titleSmall: TextStyle(
          color: appTheme.greenA200,
          fontSize: 14.fSize,
          fontFamily: 'Rubik',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF14BE77),
    primaryContainer: Color(0XFF252525),
    secondary: Color(0XFF252525),
    secondaryContainer: Color(0XFF828282),
    tertiary: Color(0XFF252525),
    tertiaryContainer: Color(0XFF828282),

    // Background colors
    background: Color(0XFF252525),

    // Surface colors
    surface: Color(0XFF252525),
    surfaceTint: Color(0XA2181818),
    surfaceVariant: Color(0XFF828282),

    // Error colors
    error: Color(0XA2181818),
    errorContainer: Color(0XFF068246),
    onError: Color(0XFF32BA7C),
    onErrorContainer: Color(0XFF09051C),

    // On colors(text colors)
    onBackground: Color(0XFFD9D9D9),
    onInverseSurface: Color(0XFF32BA7C),
    onPrimary: Color(0XA2181818),
    onPrimaryContainer: Color(0XFFD9D9D9),
    onSecondary: Color(0XFFD9D9D9),
    onSecondaryContainer: Color(0XA2181818),
    onTertiary: Color(0XFFD9D9D9),
    onTertiaryContainer: Color(0XA2181818),

    // Other colors
    outline: Color(0XA2181818),
    outlineVariant: Color(0XFF252525),
    scrim: Color(0XFF252525),
    shadow: Color(0XA2181818),

    // Inverse colors
    inversePrimary: Color(0XFF252525),
    inverseSurface: Color(0XA2181818),

    // Pending colors
    onSurface: Color(0XFFD9D9D9),
    onSurfaceVariant: Color(0XA2181818),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber300 => Color(0XFFFFE14D);

  // Black
  Color get black900 => Color(0XFF09041B);
  Color get black90001 => Color(0XFF000000);

  // Blue
  Color get blue800 => Color(0XFF2566AF);

  // BlueGray
  Color get blueGray200 => Color(0XFFB0BEC5);
  Color get blueGray400 => Color(0XFF888888);

  // Cyan
  Color get cyan90033 => Color(0X33134D5A);

  // DeepOrange
  Color get deepOrange700 => Color(0XFFDA6317);
  Color get deepOrangeA200 => Color(0XFFFF7B32);
  Color get deepOrangeA400 => Color(0XFFFF4600);

  // Gray
  Color get gray100 => Color(0XFFF4F4F4);
  Color get gray10001 => Color(0XFFF6F6F6);
  Color get gray200 => Color(0XFFE7E7E7);
  Color get gray400 => Color(0XFFBEBEBE);
  Color get gray50 => Color(0XFFF6FAFE);
  Color get gray700 => Color(0XFF8C466A);
  Color get gray70001 => Color(0XFF6B3A5B);
  Color get gray800 => Color(0XFF3B3B3B);

  // Green
  Color get greenA200 => Color(0XFF53E78B);

  // Indigo
  Color get indigo600 => Color(0XFF3C5A9A);
  Color get indigo800 => Color(0XFF253B80);
  Color get indigoA20011 => Color(0X115A6CEA);

  // Lime
  Color get lime100 => Color(0XFFE9F7BA);

  // Orange
  Color get orangeA200 => Color(0XFFF9A84D);

  // Red
  Color get red500 => Color(0XFFEB4335);
  Color get red700 => Color(0XFFE21B1B);
  Color get redA200 => Color(0XFFFF4A4A);
  Color get redA20001 => Color(0XFFFF4155);
  Color get redA400 => Color(0XFFFF1C1C);

  // Teal
  Color get teal300 => Color(0XFF3FDA85);
  Color get teal400 => Color(0XFF2ECF80);
  Color get teal700 => Color(0XFF009C51);

  // White
  Color get whiteA700 => Color(0XFFFAFDFF);
  Color get whiteA70001 => Color(0XFFFEFEFF);
  Color get whiteA70002 => Color(0XFFFFFFFF);

  // Yellow
  Color get yellow300 => Color(0XFFFBDF69);
  Color get yellow800 => Color(0XFFFEAD1D);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
